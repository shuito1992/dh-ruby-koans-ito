ruby_koansの気になったところ


    @about_arrays

arrayの範囲指定ex)array[2,2]など
rangeとarray
[0..5]と[0...5]の違い
push,pop,unshift,shift


    @about_hashes

最後2問 「<<」の使い方


    @about_string

53行 ヒアドキュメント<<EOS
101行 <<(shovel operator)はoriginalにも変更を加える。ここを詳しく。
155-169行 single characterは古いバージョンでは数字で表され、新しいバージョンではstringで表される。もう少し詳しく。


    @about_symbols

23行 symbolでは同じ文字列は同じoblject_idを持つ。stringでは、別に生成した同じ文字列は違うobject_idを持つ。
26行 test_method_name_become_symbolsはかなり謎。.map{ |x| x.to_s }の意味も分からん(前も同じような書き方があった)。
    methodを表すのにsymbolを使うのだろう。symbolは同じ綴りであれば唯一のobjectになるから都合が良い。そのために、すべてのmethod名に対応するsymbolが事前に用意されている。あってるか？
36行 MRI（Matz' Ruby Implementation）
    1.8.x以前の公式実装。まつもとゆきひろによって開発されはじめたC言語による実装であり、最も広く使われている。JRuby などに対して CRuby と呼ばれることもある。また、JRuby などに対しては、広義の意味で後述の YARV を取り込んだ 1.9.x も含んで MRI と言うこともある。
38行 test_constants_become_symbolsを飛ばした。後でやるべし。
    .to_sはto_stringの略で、要素をすべて文字列に変換する。
    {|x| x}はイテレーションの簡略系で、xはSymbol.all_symbolsから来ている。
    .mapは配列を作る。
    多分すべてのオブジェクト(もとから定義されているものと、新しく定義したものすべて)は定義されると同時に同名のsymbolも生成されるのだろう。
76行 オブジェクトにメソッドがあるかを調べるときにrespond_toを使う。
    each_charメソッドは、charsメソッドの別名です。ブロック引数charに1文字を入れながら、文字数だけブロックを繰り返します。
    reverseメソッドは要素を反転させる。
    symbols are not immutable.(NoMethodError)
86行 assert_raise(klass1,...)
    ブロックを実行して例外が発生し、その例外が klass1, klass2,... のいずれかのクラスのインスタンスならばパスします。


    @about_regular_expressions

5行 正規表現(regular expression,Regexp)は文字列のパターンを記述するための言語です。
    /pat/や%r{pat}などの正規表現リテラルやRegexp.newなどで正規表現オブジェクトを得ることができます。
9-31行 [],/,?,+,*の使い方がイマイチ分かってない。
    []は多分.match()と同じ役割をしているのだろう。
    /~~/はパターンを特定する。
    「?」は「その前の文字が0個か1個の場合」のみマッチ。
    「+」は「その前の文字が1個以上ある場合」のみマッチ。
    「*」は「0回以上の繰り返し」にマッチ。
47行 この問題で"a"("az"ではなく)がマッチする理由は、検索が左端から順に行われていて、最初に"abbc..."の"a"がマッチしてしまうからだろう。
57行 [0123456789]==\d==[0-9]
67行 「\s」空白文字を表す。空白(0x20)、タブ(\t)、改行(\n)、改ページ(？)とマッチする。
70行 「\w」は英数字にマッチする(=[a-zA-Z0-9])。
76行 「.」は任意の一文字にマッチする。ここで"abc"と3文字にマッチするのは+が原因か？「.」はスペースにはマッチしないのか？
80行 「[]」の中で先頭文字として「^」を使うと、「そこで指定されたもの以外の文字」を表す。
84行 Shortcut character classes are negated(否定する) with capitals.
94行 「\A」は文字列の先頭にマッチする。
99行 「\z」は文字列の末尾にマッチする。
105行 「^」は「行頭(改行の直後)の文字列」にマッチする。
108行 「$」は「行の末尾の文字列」にマッチする。
112行 「\b」は「バックスペース」を表す。ただイマイチ理解が完全ではない。復習必要。
118行 「()」は複数の文字列を一つの単位として扱える。
124行 「[]」の最後に「,」と数字を入れると、何個目のマッチを引っ張ってくるか指定できる。
129行 「$1」はカンマの前を指定し、「$2」はカンマの後の要素を指定している。
137行 「|」はorを表す。
    ここではカンマを使ってないけど、それでも数字による要素指定ができるようだ。勘違いしている部分があるはず。
150行 .scan()はマッチするすべての要素をリストにして返す。
154行 .sub(){~~}はマッチした最初の要素に{}で指定された処理を施す。

